{"version":3,"sources":["redux/types.js","redux/moviesReducer.js","redux/rootReducer.js","store/index.js","redux/actions.js","images/dropdown.svg","components/EpisodesList/EpisodesList.jsx","components/Seasons/Seasons.jsx","components/Movie/Movie.jsx","components/Episode/Episode.jsx","App.jsx","index.js"],"names":["GET_MOVIE","initialState","movies","rootReducer","combineReducers","state","action","type","payload","store","createStore","compose","applyMiddleware","thunk","getMovie","dispatch","a","fetch","response","json","EpisodesList","episodes","setEpisodeInfo","className","map","episode","onClick","id","name","image","season","number","summary","to","Seasons","useState","seasons","setSeasons","numberOfSeasons","Math","max","arr","newSeason","active","push","useEffect","reverse","selectedSeason","handleClick","classNames","src","dropdown","alt","CSSTransition","in","timeout","unmountOnExit","filter","series","Movie","useDispatch","movie","useSelector","Object","keys","length","medium","replace","_embedded","Episode","App","episodeInfo","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a035be78.chunk.js","sourcesContent":["export const GET_MOVIE = 'movie/GET_MOVIE';\n","import { GET_MOVIE } from './types';\n\nconst initialState = {\n  movies: {},\n};\n\nexport const moviesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MOVIE:\n      return {\n        ...state,\n        movies: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { moviesReducer } from './moviesReducer';\n\nexport const rootReducer = combineReducers({\n  movies: moviesReducer,\n});\n","import { compose, createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from '../redux/rootReducer';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer, compose(\n  applyMiddleware(thunk),\n));\n","import { GET_MOVIE } from './types';\n\nconst urlFindMovie = 'https://api.tvmaze.com/singlesearch/shows?q=';\nconst showToLoad = 'Powerpuff&Girls';\n\nexport function getMovie() {\n  return async(dispatch) => {\n    const response = await fetch(`${urlFindMovie}${showToLoad}&embed=episodes`);\n    const json = await response.json();\n\n    dispatch({\n      type: GET_MOVIE,\n      payload: json,\n    });\n  };\n}\n","export default __webpack_public_path__ + \"static/media/dropdown.ce6cdfc6.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './episodes.scss';\n\nexport const EpisodesList = ({ episodes, setEpisodeInfo }) => (\n  <ul className=\"list\">\n    {episodes.map(episode => (\n      <li\n        className=\"list__item\"\n        key={episode.id}\n        onClick={() => setEpisodeInfo({\n          id: episode.id,\n          name: episode.name,\n          image: episode.image,\n          season: episode.season,\n          number: episode.number,\n          summary: episode.summary,\n        })}\n      >\n        <Link className=\"list__link\" to={`/${episode.id}`}>\n          <p className=\"list__name\">\n            {episode.name}\n          </p>\n          <p className=\"list__info\">\n            {`S:${episode.season} E:${episode.number}`}\n          </p>\n        </Link>\n      </li>\n    ))}\n  </ul>\n);\n\nEpisodesList.propTypes = {\n  episodes: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    season: PropTypes.number.isRequired,\n    number: PropTypes.number.isRequired,\n  })).isRequired,\n  setEpisodeInfo: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport dropdown from '../../images/dropdown.svg';\nimport { EpisodesList } from '../EpisodesList';\nimport './seasons.scss';\n\nexport const Seasons = ({ episodes, setEpisodeInfo }) => {\n  const [seasons, setSeasons] = useState([]);\n  let numberOfSeasons = Math.max(...episodes.map(episode => episode.season));\n  const arr = [];\n\n  while (numberOfSeasons > 0) {\n    const newSeason = {\n      season: numberOfSeasons,\n      active: false,\n      id: numberOfSeasons,\n    };\n\n    arr.push(newSeason);\n    numberOfSeasons -= 1;\n  }\n\n  useEffect(() => {\n    setSeasons(arr);\n  }, []);\n\n  const handleClick = (id) => {\n    const selectedSeason = seasons.map((season) => {\n      if (season.id === id) {\n        season.active = !season.active;\n      }\n\n      return season;\n    });\n\n    setSeasons(selectedSeason);\n  };\n\n  return (\n    <div className=\"seasons\">\n      {[...seasons].reverse().map(season => (\n        <>\n          <button\n            className=\"seasons__button\"\n            type=\"button\"\n            onClick={() => handleClick(season.id)}\n            key={season.id}\n          >\n            {`Season: ${season.season}`}\n            <img\n              className={classNames(\n                'seasons__dropdown',\n                { 'seasons__dropdown--active': season.active === true },\n              )}\n              src={dropdown}\n              alt=\"dropdown\"\n            />\n          </button>\n          <CSSTransition\n            in={season.active}\n            timeout={400}\n            classNames=\"display\"\n            unmountOnExit\n          >\n            <EpisodesList\n              episodes={episodes.filter(\n                series => series.season === season.season,\n              )}\n              setEpisodeInfo={setEpisodeInfo}\n            />\n          </CSSTransition>\n        </>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMovie } from '../../redux/actions';\nimport { Seasons } from '../Seasons';\n// import { EpisodesList } from '../EpisodesList';\n\nimport './movie.scss';\n\nconst Movie = ({ setEpisodeInfo }) => {\n  const dispatch = useDispatch();\n  const movie = useSelector((state) => {\n    if (Object.keys(state.movies.movies).length > 0) {\n      return state.movies.movies;\n    }\n  });\n\n  useEffect(() => {\n    dispatch(getMovie());\n  }, [dispatch, getMovie]);\n\n  return (\n    <div className=\"movie\">\n      {movie && (\n        <>\n          <h1 className=\"movie__title\">\n            {movie.name}\n          </h1>\n          <p className=\"movie__description\">\n            <img\n              className=\"movie__image\"\n              src={movie.image.medium}\n              alt={movie.name}\n            />\n            {movie.summary.replace('<p>', '').replace('</p>', '').replace('<b>', '').replace('</b>', '')}\n          </p>\n          <Seasons\n            episodes={movie._embedded.episodes}\n            setEpisodeInfo={setEpisodeInfo}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './episode.scss';\n\nexport const Episode = ({ episode }) => (\n  <div className=\"episode\">\n    <h1 className=\"episode__title\">\n      {episode.name}\n    </h1>\n    {episode.image && (\n      <img\n        className=\"episode__image\"\n        src={episode.image.medium}\n        alt=\"cartoon\"\n      />\n    )}\n    {episode.summary && (\n      <p className=\"episode__description\">\n        {episode.summary.replace('<p>', '').replace('</p>', '').replace('<b>', '').replace('</b>', '')}\n      </p>\n    )}\n    <p className=\"episode__info\">\n      {`Season: ${episode.season} Episode: ${episode.number}`}\n    </p>\n\n    <Link className=\"episode__link\" to=\"/\">\n      Back\n    </Link>\n  </div>\n);\n\nEpisode.propTypes = {\n  episode: PropTypes.objectOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    medium: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    replace: PropTypes.func.isRequired,\n    season: PropTypes.number.isRequired,\n    number: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Movie from './components/Movie/Movie';\nimport './App.scss';\nimport { Episode } from './components/Episode';\n\nexport const App = () => {\n  const [episodeInfo, setEpisodeInfo] = useState({});\n\n  return (\n    <div className=\"container\">\n      <Switch>\n        <Route path={`/${episodeInfo.id}`}>\n          <Episode episode={episodeInfo} />\n        </Route>\n\n        <Route path=\"/\">\n          <Movie setEpisodeInfo={setEpisodeInfo} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}